# -*- coding: utf-8 -*-
"""CSE 351 HW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nufwdSe2LrKQE4iLPDdnH8IYFJZ_3l3A
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import datetime

weather_df = pd.read_csv('/content/drive/MyDrive/weather_data.csv')
energy_df = pd.read_csv('/content/drive/MyDrive/energy_data.csv')

weather_df.head(10)

energy_df.head(10)

"""## Task 1"""

# group weather_df by date
weather_df["Date"] = [datetime.datetime.fromtimestamp(time).strftime("%Y-%m-%d") for time in weather_df.time]
weather_df_gbdate = weather_df.groupby("Date").mean().reset_index()

# group energy_df by date
energy_df["Date"] = [str(val).split()[0] for val in energy_df["Date & Time"]]
energy_df_gbdate = energy_df.groupby("Date").sum().reset_index()

# merge two dataframes
merged_df = pd.merge(weather_df_gbdate, energy_df_gbdate, on='Date')

"""## Task 2"""

dataset = pd.DataFrame()
for col in merged_df.columns[:13]:
    dataset[col] = merged_df[col]

train_df = dataset[:len(dataset) - 31].drop("Date",axis=1).drop("time",axis=1)
test_df = dataset[len(dataset) - 31:].drop("Date",axis=1).drop("time",axis=1)

"""## Task 3"""

train_x = train_df.drop("use [kW]", 1)
train_y = train_df["use [kW]"]
test_x = test_df.drop("use [kW]", 1)
test_y = test_df["use [kW]"]

LR = LinearRegression() ## setting up linear regression model
LR = LR.fit(train_x,train_y) ## training the model

prediction = LR.predict(test_x) ## testing the model

from sklearn.metrics import mean_squared_error
rmse = mean_squared_error(test_y, prediction, squared=False)
print("root mean squared error: ", rmse)

# generate a csv file
pd.DataFrame({"Date":dataset[len(dataset) - 31:]["Date"], "Predicted Value":prediction}).to_csv("task3.csv", index=False)

"""## Task 4"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import f1_score

temparature_label = [1 if temperature >= 35 else 0 for temperature in weather_df_gbdate["temperature"]]

logistic_regression_data = weather_df_gbdate.copy()
logistic_regression_data["temperature"] = temparature_label
train_dataset = logistic_regression_data[:len(logistic_regression_data)-31].drop(["Date", "time"],axis=1)
test_dataset = logistic_regression_data[len(logistic_regression_data)-31:].drop(["Date", "time"],axis=1)

train_x = train_dataset.drop("temperature", 1)
train_y = train_dataset["temperature"]
test_x = test_dataset.drop("temperature", 1)
test_y = test_dataset["temperature"]

model = LogisticRegression(max_iter=10000)
model.fit(train_x,train_y)
prediction = model.predict(test_x)

score = f1_score(test_y, prediction)
print("Fl score:", score)

# generate a csv file
pd.DataFrame({"Date": weather_df_gbdate[len(weather_df_gbdate) - 31:]["Date"], "Classification":prediction}).to_csv("task4.csv", index=False)

"""## Task 5"""

date_format = "%Y-%m-%d %H:%M:%S"
energy_df["Duration"] = \
['Day' if (19*60*60) > datetime.datetime.strptime(time, date_format).timestamp()%(60*60*24) >= 6*60*60 \
 else 'Night' \
 for time in energy_df["Date & Time"]]

energy_df[["Date & Time", "Duration"]].head(40)

energy_df_gbduration = energy_df.groupby("Duration").mean()

"""### The chart below depicts that the majority of individuals tend to use AC during the night, with the highest usage occurring at 7pm, which could be due to a number of factors such as people returning home from work or school and wanting to cool down their living spaces before settling in for the evening. """

import matplotlib.pyplot as plt
import matplotlib as mpl

mpl.rcParams['figure.figsize'] = (15, 12)  # set the default figure size

energy_df["time"] = [str(i).split()[-1][:-3] for i in energy_df["Date & Time"]]
energy_df_gbtime = energy_df.groupby("time").mean().reset_index()
plt.plot(energy_df_gbtime["time"], energy_df_gbtime["AC [kW]"], label = "Night");
plt.plot(energy_df_gbtime["time"][12:38], energy_df_gbtime["AC [kW]"][12:38], label = "Day");

plt.xticks(rotation=90)

plt.xlabel("Time")
plt.ylabel("kW")
plt.title("Average AC Power Consumption by Time of Day")

plt.legend()
plt.show()

"""###Contrary to the AC usage pattern, the majority of people tend to use the microwave during the day, with peak hours observed around breakfast and dinner time. It's possible that the peak in usage around breakfast time is related to people heating up their morning coffee or breakfast foods, while the peak around dinner time is related to meal preparation and reheating leftovers."""

plt.bar(energy_df_gbtime["time"], energy_df_gbtime["Microwave (R) [kW]"], label = "Night");
plt.bar(energy_df_gbtime["time"][12:38], energy_df_gbtime["Microwave (R) [kW]"][12:38], label = "Day");

plt.xticks(rotation=90)

plt.xlabel("Time")
plt.ylabel("kW")
plt.title("Average Microwave Power Consumption by Time of Day")

plt.legend()
plt.show()